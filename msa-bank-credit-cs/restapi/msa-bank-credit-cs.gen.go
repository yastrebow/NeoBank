// Package restapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package restapi

import (
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create new credit
	// (POST /credit)
	PostCredit(ctx echo.Context) error
	// Create new earlyRepayment
	// (POST /credit/earlyRepayment)
	PostCreditEarlyRepayment(ctx echo.Context) error
	// Creating a request for full repayment
	// (POST /credit/fullRepayment)
	PostCreditFullRepayment(ctx echo.Context) error
	// Get credit paymentPlan from the store
	// (POST /credit/paymentPlan)
	PostCreditPaymentPlan(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostCredit converts echo context to params.
func (w *ServerInterfaceWrapper) PostCredit(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostCredit(ctx)
	return err
}

// PostCreditEarlyRepayment converts echo context to params.
func (w *ServerInterfaceWrapper) PostCreditEarlyRepayment(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostCreditEarlyRepayment(ctx)
	return err
}

// PostCreditFullRepayment converts echo context to params.
func (w *ServerInterfaceWrapper) PostCreditFullRepayment(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostCreditFullRepayment(ctx)
	return err
}

// PostCreditPaymentPlan converts echo context to params.
func (w *ServerInterfaceWrapper) PostCreditPaymentPlan(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostCreditPaymentPlan(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/credit", wrapper.PostCredit)
	router.POST(baseURL+"/credit/earlyRepayment", wrapper.PostCreditEarlyRepayment)
	router.POST(baseURL+"/credit/fullRepayment", wrapper.PostCreditFullRepayment)
	router.POST(baseURL+"/credit/paymentPlan", wrapper.PostCreditPaymentPlan)

}
